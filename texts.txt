so
i want you to create me a full stack website
with backend with repository architecture and dependency injection following solid principles and inversify and everything
with typescript , node , express and mongodb
the folder structure should be like

backend/src/
-config
-controllers
-core
-constants
-middlewares
-models
-public
-repositories
-routes
--services
-utils
-validations
app.ts
index.ts

and inside controllers i want user and admin
and inside the user and admin i need UserAuth.controller.ts and AdminAuth.controller.ts

and inside config i need every configurations like db.ts, redis for caching and better speeding and it's upto you the rest

and inside core there are di folder, interfaces folder, and types folder
and in di there i want the container.ts file for example

// import { Container } from "inversify"
// import { TYPES } from "../types/types"
// import { OAuthClient } from "../../utils/OAuthClient"

// // Controllers
// import type { IUserAuthController } from "../interfaces/controllers/user/IUserAuth.controllers"
// import { UserAuthController } from "../../controllers/user/UserAuth.controller"
// // import { IAdminAuthController } from "../interfaces/controllers/admin/IAuthAdmin.controllers" // Commented out as per your code

// // Services
// import type { IUserAuthService } from "../interfaces/services/user/IUserAuthService"
// import { UserAuthService } from "../../services/user/UserAuth.service"
// import { JwtService } from "../../utils/jwt"

// // Repositories
// import type { IUserRepository } from "../interfaces/repositories/IUserRepository"
// import { UserRepository } from "../../repositories/user.repository"
// import type { IOTPService } from "../interfaces/services/IOtpService"
// import { OtpService } from "../../services/otp.service"
// import type { IOtpRepository } from "../interfaces/repositories/IOtpRepository"
// import { OtpRepository } from "../../repositories/otp.repository"
// import type { IMailService } from "../interfaces/services/IMailService"
// import { MailService } from "../../services/mail.service"
// // import { IRedisClient } from "../../config/redis" // Commented out as per your code
// // import redisClient from "../../config/redis" // Commented out as per your code

// // Create Container
// const container = new Container()

// // Bind Controllers
// container.bind<IUserAuthController>(TYPES.IUserAuthController).to(UserAuthController)
// // container.bind<IAdminAuthController>(TYPES.IAdminAuthController).to(AdminAuthController) // Commented out as per your code

// // Bind Services
// container.bind<IUserAuthService>(TYPES.IUserAuthService).to(UserAuthService)

// // Bind Repositories
// container.bind<IUserRepository>(TYPES.IUserRepository).to(UserRepository)

// // Bind OAuth Client
// container.bind<OAuthClient>(TYPES.IOAuthClient).to(OAuthClient)

// // Bind other services
// // container.bind<IEmailService>(TYPES.IEmailService).to(EmailService); // Commented out as per your code
// container.bind<JwtService>(TYPES.JwtService).to(JwtService)
// container.bind<IOTPService>(TYPES.IOtpService).to(OtpService)

// // Bind Otp Repository
// container.bind<IOtpRepository>(TYPES.IOtpRepository).to(OtpRepository)
// container.bind<IMailService>(TYPES.IMailService).to(MailService)

// // utilities
// // container.bind<IRedisClient>(TYPES.IRedisClient).toConstantValue(redisClient) // Commented out as per your code

// export default container


and inside interfaces i need controllers, repositories, services
like interfaces for everything like IUserAuth.controller.ts etc..

and inside types i need the types.ts file 
example 
export const TYPES = {
    IUserAuthController: Symbol.for("IUserAuthController"),
    UserAuthController: Symbol.for("UserAuthController"),
    IAdminAuthController: Symbol.for("IAdminAuthController"),
    AdminAuthController: Symbol.for("AdminAuthController"),
    IUserAuthService: Symbol.for("IUserAuthService"),
    UserAuthService: Symbol.for("UserAuthService"),
    IAdminAuthService: Symbol.for("IAdminAuthService"),
    AdminAuthService: Symbol.for("AdminAuthService"),
    IUserRepository: Symbol.for("IUserRepository"),
    UserRepository: Symbol.for("UserRepository"),
    IAdminRepository: Symbol.for("IAdminRepository"),
    AdminRepository: Symbol.for("AdminRepository"),
    IOtpService: Symbol.for("IOtpService"),
    OtpService: Symbol.for("OtpService"),
    IOAuthClient: Symbol.for("IOAuthClient"),
    OAuthClient: Symbol.for("OAuthClient"),
    IEmailService: Symbol.for("IEmailService"),
    EmailService: Symbol.for("EmailService"),
    IJwtService: Symbol.for("IJwtService"),
    JwtService: Symbol.for("JwtService"),
    IOtpRepository: Symbol.for("IOtpRepository"),
    OtpRepository: Symbol.for("OtpRepository"),
    IMailService: Symbol.for("IMailService"),
    MailService: Symbol.for("MailService"),
    IRedisClient: Symbol.for("IRedisClient"),



}



and inside the constants i need all the constant values like messages and status codes like enums
and i need this to use in the project also..

rest the backend codes is upto you need admin and user

the things i need is that

user side , sign-up, sign-in, verify-otp , forgot-password, login with google, also logout also
like the authentication complete
proper usage of jwt tokens is neccasary

and in admin side i need the admin login and logout, with proper session and jwt and everything managed, 


and in the frontend i want with nextjs and tailwind, with typescript with the src folder 

and use axios and axios interceptors and everything 
also manage proper state with redux or zustand whichever you feels better
and session management i need is proper

the folder structure like

frontend/src/

app/(auth)/ then routes and pages
app/(dashboard)/admin and rest is upto your logic
components

rest is upto you but i need very scalable and efficient codes 

admin side need a aside bar componeent and everything
main page i mean main user page i already designed


export default function HomePage() {

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900">
      <Navbar />
      <main>
        <HeroSection />
        <MovingMessages />
        <NFTSection />
        <SocialSection />
      </main>
      <Footer />
    </div>
  )
}


navbar you can decide 

rest i have

so impress me with your skill



i need nextjs as front end and don't make the db.ts complicated just need the

import mongoose from "mongoose";
import dotenv from "dotenv";
dotenv.config();
import logger from "../utils/logger";

const connectDB = async () => {
    try {
        if(!process.env.MONGO_URI) {
            throw new Error("MONGO_URI is not defined in .env file");
        }
        const connect = await mongoose.connect(process.env.MONGO_URI)
        logger.info(`MongoDB connected: ${connect.connection.host}`);
    } catch (error) {
        logger.error(`Error connecting to MongoDB: ${error}`);
        process.exit(1);
    }
}

export default connectDB;



and in the models include the interface inside that file

like this


import mongoose, {Schema, Document, Model, Types} from "mongoose";
import { ObjectId } from "mongodb";


export interface IUser extends Document {
    _id: ObjectId;
    username: string;
    name: string;
    email: string;
    password: string;
    phone: string;
    googleId: string | null;
    refferalCode: string;
    refferedBy: ObjectId | null;
    profilePic: string;
    role: string;
    totalPoints: number;
    isBlocked: boolean;
    isBanned: boolean;
    isEmailVerified: boolean;
    isGoogleUser: boolean;
    dailyCheckin:{
        lastCheckIn: Date;
        streak: number;
    }
    followersCount: number;
    followingCount: number;
    createdAt: Date;
    updatedAt: Date;
}


const UserSchema: Schema<IUser> = new Schema({
    username: { type: String, required: true, unique: true },
    name: { type: String, required: false },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: false },
    phone: { type: String, required: false },
    googleId: { type: String, default: null },
    refferalCode: { type: String, required: false, unique: true },
    refferedBy: { type: Types.ObjectId, ref: 'User', default: null },
    profilePic: { type: String, default: '' },
    totalPoints: { type: Number, default: 0 },
    isBlocked: { type: Boolean, default: false },
    isBanned: { type: Boolean, default: false },
    role: {type: String, enum:['user', 'admin'], default: 'user'},
    isEmailVerified: { type: Boolean, default: false },
    isGoogleUser: { type: Boolean, default: false }, // Added to schema
    dailyCheckin:{
        lastCheckIn:{type : Date, default : null},
        streak:{type : Number, default : 0}
    },
    followersCount:{type : Number, default : 0},
    followingCount:{type : Number, default : 0},
}, {
    timestamps: true
})

// export type UserDocument = IUser & Document;
export const UserModel: Model<IUser> = mongoose.model<IUser>('User', UserSchema);
// export default UserModel;



rest is upto you impress me...
